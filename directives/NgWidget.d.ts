import { NgWidgetContainer } from "./NgWidgetContainer";
import { INgWidgetConfig, INgWidgetEvent, INgWidgetPosition, INgWidgetSize, INgWidgetContainerRawPosition, INgWidgetDimensions } from "../interfaces/INgDraggableWidgetConfig";
import { ElementRef, Renderer2, EventEmitter, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef } from '@angular/core';
/**
 *	inputs array instead of @input decorator for ionic compatibility
 */
export declare class NgWidget implements OnInit, OnDestroy, DoCheck {
    private _differs;
    private _ngEl;
    private _renderer;
    private _ngWidgetContainer;
    containerRef: ViewContainerRef;
    private static CONST_DEFAULT_CONFIG;
    onItemChange: EventEmitter<INgWidgetEvent>;
    onDragStart: EventEmitter<INgWidgetEvent>;
    onDrag: EventEmitter<INgWidgetEvent>;
    onDragStop: EventEmitter<INgWidgetEvent>;
    onDragAny: EventEmitter<INgWidgetEvent>;
    onResizeStart: EventEmitter<INgWidgetEvent>;
    onResize: EventEmitter<INgWidgetEvent>;
    onResizeStop: EventEmitter<INgWidgetEvent>;
    onResizeAny: EventEmitter<INgWidgetEvent>;
    onChangeStart: EventEmitter<INgWidgetEvent>;
    onChange: EventEmitter<INgWidgetEvent>;
    onChangeStop: EventEmitter<INgWidgetEvent>;
    onChangeAny: EventEmitter<INgWidgetEvent>;
    ngWidgetChange: EventEmitter<INgWidgetConfig>;
    isFixed: boolean;
    isDraggable: boolean;
    isResizable: boolean;
    minWidth: number;
    minHeight: number;
    private _payload;
    private _currentPosition;
    private _size;
    private _config;
    private _dragHandle;
    private _resizeHandle;
    private _borderSize;
    private _elemWidth;
    private _elemHeight;
    private _elemLeft;
    private _elemTop;
    private _added;
    private _differ;
    private _cascadeMode;
    private _maxCols;
    private _minCols;
    private _maxRows;
    private _minRows;
    private _dragStartPosition;
    config: INgWidgetConfig;
    readonly sizex: number;
    readonly sizey: number;
    readonly col: number;
    readonly row: number;
    readonly currentCol: number;
    readonly currentRow: number;
    constructor(_differs: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2, _ngWidgetContainer: NgWidgetContainer, containerRef: ViewContainerRef);
    onResizeStartEvent(): void;
    onResizeEvent(): void;
    onResizeStopEvent(): void;
    onDragStartEvent(): void;
    onDragEvent(): void;
    onDragStopEvent(): void;
    onCascadeEvent(): void;
    ngOnInit(): void;
    canDrag(e: any): boolean;
    findHandle(handleSelector: string, startElement: HTMLElement): boolean;
    canResize(e: any): string;
    getResizeDirection(e: MouseEvent): string;
    onMouseMove(e: any): void;
    ngOnDestroy(): void;
    getElement(): ElementRef;
    getDragHandle(): string;
    getResizeHandle(): string;
    getDimensions(): INgWidgetDimensions;
    getSize(): INgWidgetSize;
    getPosition(): INgWidgetContainerRawPosition;
    getWidgetPosition(): INgWidgetPosition;
    getWidgetDragStartPosition(): INgWidgetPosition;
    setWidgetDragStartPosition(position: INgWidgetPosition): void;
    setConfig(config: INgWidgetConfig): void;
    ngDoCheck(): boolean;
    setSize(newSize: INgWidgetSize, update?: boolean): void;
    setGridPosition(widgetPosition: INgWidgetPosition, update?: boolean): void;
    getEventOutput(): INgWidgetEvent;
    setPosition(x: number, y: number): void;
    setCascadeMode(cascade: string): void;
    setDimensions(w: number, h: number): void;
    startMoving(): void;
    stopMoving(): void;
    recalculateSelf(): void;
    fixResize(newSize: INgWidgetSize): INgWidgetSize;
    private elementMatches(element, selector);
    private _recalculatePosition();
    private _recalculateDimensions();
    private _getMousePosition(e);
    private _applyChanges(changes);
}
